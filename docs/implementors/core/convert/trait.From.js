(function() {var implementors = {};
implementors["gens_aggregates"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]}];
implementors["gens_bailsman"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]}];
implementors["gens_balances"] = [{"text":"impl&lt;AccountId, Balance&gt; From&lt;RawEvent&lt;AccountId, Balance&gt;&gt; for ()","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]}];
implementors["gens_oracle"] = [{"text":"impl From&lt;Public&gt; for Public","synthetic":false,"types":[]},{"text":"impl From&lt;Public&gt; for Public","synthetic":false,"types":[]},{"text":"impl From&lt;Public&gt; for CryptoTypePublicPair","synthetic":false,"types":[]},{"text":"impl&lt;'_&gt; From&lt;&amp;'_ Public&gt; for CryptoTypePublicPair","synthetic":false,"types":[]},{"text":"impl From&lt;Signature&gt; for Signature","synthetic":false,"types":[]},{"text":"impl From&lt;Signature&gt; for Signature","synthetic":false,"types":[]},{"text":"impl From&lt;Pair&gt; for Pair","synthetic":false,"types":[]},{"text":"impl From&lt;Pair&gt; for Pair","synthetic":false,"types":[]},{"text":"impl&lt;AccountId, Currency&gt; From&lt;RawEvent&lt;AccountId, Currency&gt;&gt; for ()","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]}];
implementors["gens_primitives"] = [{"text":"impl From&lt;u8&gt; for Currency","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;AtLeast32Bit + FullCodec + Copy + MaybeSerializeDeserialize + Debug + Default + Member, P:&nbsp;Imbalance&lt;B, Opposite = N&gt;, N:&nbsp;Imbalance&lt;B, Opposite = P&gt;, '_&gt; From&lt;&amp;'_ SignedImbalance&lt;B, P&gt;&gt; for SignedBalance&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for UserGroup","synthetic":false,"types":[]}];
implementors["gens_rate"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]}];
implementors["gens_session_manager"] = [{"text":"impl&lt;ValidatorId&gt; From&lt;RawEvent&lt;ValidatorId&gt;&gt; for ()","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]}];
implementors["gens_treasury"] = [{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]}];
implementors["gens_vesting"] = [{"text":"impl&lt;AccountId, Balance&gt; From&lt;RawEvent&lt;AccountId, Balance&gt;&gt; for ()","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]}];
implementors["gens_whitelists"] = [{"text":"impl&lt;AccountId&gt; From&lt;RawEvent&lt;AccountId&gt;&gt; for ()","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for &amp;'static str","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Trait&gt; From&lt;Error&lt;T&gt;&gt; for DispatchError","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()